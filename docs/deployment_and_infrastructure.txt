# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mycheff-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: mycheff_db
      POSTGRES_USER: mycheff_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mycheff-network

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: mycheff-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - mycheff-network

  # NestJS API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mycheff-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: mycheff_db
      DATABASE_USERNAME: mycheff_user
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - mycheff-network
    volumes:
      - ./uploads:/app/uploads

  # Queue Worker
  queue-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mycheff-queue-worker
    restart: unless-stopped
    command: npm run start:queue
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: mycheff_db
      DATABASE_USERNAME: mycheff_user
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - mycheff-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mycheff-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - mycheff-network

volumes:
  postgres_data:
  redis_data:

networks:
  mycheff-network:
    driver: bridge

---
# Dockerfile
FROM node:18-alpine AS base

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY yarn.lock ./

FROM base AS dependencies

# Install dependencies
RUN yarn install --frozen-lockfile

# Development stage
FROM dependencies AS development

COPY . .
EXPOSE 3000
CMD ["yarn", "start:dev"]

# Build stage
FROM dependencies AS build

COPY . .
RUN yarn build

# Production stage
FROM node:18-alpine AS production

WORKDIR /app

# Copy package files and install production dependencies
COPY package*.json ./
COPY yarn.lock ./
RUN yarn install --frozen-lockfile --production && yarn cache clean

# Copy built application
COPY --from=build /app/dist ./dist

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

# Change ownership of the working directory
RUN chown -R nestjs:nodejs /app
USER nestjs

EXPOSE 3000

CMD ["node", "dist/main.js"]

---
# .env.example
# Database Configuration
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_NAME=mycheff_db
DATABASE_USERNAME=mycheff_user
DATABASE_PASSWORD=your_secure_password

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=your_redis_password

# JWT Configuration
JWT_SECRET=your_jwt_secret_key
JWT_EXPIRATION=7d

# Stripe Payment Configuration
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret

# AWS S3 Configuration
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_REGION=eu-central-1
AWS_S3_BUCKET_NAME=mycheff-media

# Firebase Configuration (for push notifications)
FIREBASE_PROJECT_ID=your_firebase_project_id
FIREBASE_CLIENT_EMAIL=your_firebase_client_email
FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\nyour_private_key\n-----END PRIVATE KEY-----\n"

# Application Configuration
NODE_ENV=development
PORT=3000
APP_URL=http://localhost:3000

# Email Configuration (for future features)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@gmail.com
SMTP_PASS=your_app_password

# Rate Limiting
THROTTLE_TTL=60000
THROTTLE_LIMIT=100

---
# package.json scripts section
{
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "start:queue": "node dist/queue-worker",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json",
    "typeorm": "typeorm-ts-node-commonjs",
    "migration:generate": "typeorm-ts-node-commonjs migration:generate -d src/config/typeorm.config.ts",
    "migration:run": "typeorm-ts-node-commonjs migration:run -d src/config/typeorm.config.ts",
    "migration:revert": "typeorm-ts-node-commonjs migration:revert -d src/config/typeorm.config.ts",
    "seed": "ts-node src/database/seeds/run-seeds.ts"
  }
}

---
# nginx/nginx.conf
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;

    upstream api_backend {
        server api:3000;
    }

    server {
        listen 80;
        server_name api.mycheff.app;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # API routes
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://api_backend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # CORS headers
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
            
            if ($request_method = 'OPTIONS') {
                return 200;
            }
        }

        # Auth routes with stricter rate limiting
        location /api/auth/ {
            limit_req zone=auth burst=5 nodelay;
            
            proxy_pass http://api_backend/auth/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check
        location /health {
            proxy_pass http://api_backend/health;
            access_log off;
        }

        # Block common attack patterns
        location ~* /\.(htaccess|htpasswd|ini|log|sh|sql|conf)$ {
            deny all;
        }
    }

    # HTTPS configuration (production)
    server {
        listen 443 ssl http2;
        server_name api.mycheff.app;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Same configuration as HTTP server but with SSL
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://api_backend/;
            # ... same proxy settings as above
        }
    }
}

---
# src/queue/queue-worker.ts
import { NestFactory } from '@nestjs/core';
import { QueueWorkerModule } from './queue-worker.module';

async function bootstrap() {
  const app = await NestFactory.create(QueueWorkerModule);
  
  console.log('Queue worker started...');
  
  // Keep the process running
  process.on('SIGTERM', async () => {
    console.log('Received SIGTERM, shutting down gracefully...');
    await app.close();
    process.exit(0);
  });
}

bootstrap();

---
# src/queue/processors/analytics.processor.ts
import { Processor, Process } from '@nestjs/bull';
import { Job } from 'bull';
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';

import { UserActivity } from '../../entities/user-activity.entity';

@Processor('analytics')
@Injectable()
export class AnalyticsProcessor {
  constructor(
    @InjectRepository(UserActivity)
    private activityRepository: Repository<UserActivity>,
  ) {}

  @Process('track-activity')
  async handleActivityTracking(job: Job) {
    const { userId, activityType, recipeId, metadata, ipAddress, userAgent } = job.data;

    try {
      const activity = this.activityRepository.create({
        userId,
        activityType,
        recipeId,
        metadata,
        ipAddress,
        userAgent,
      });

      await this.activityRepository.save(activity);
      
      console.log(`Tracked activity: ${activityType} for user ${userId}`);
    } catch (error) {
      console.error('Failed to track activity:', error);
      throw error; // This will mark the job as failed and potentially retry
    }
  }

  @Process('calculate-recipe-stats')
  async handleRecipeStatsCalculation(job: Job) {
    const { recipeId } = job.data;

    try {
      // Calculate average rating and update recipe
      const stats = await this.activityRepository
        .createQueryBuilder('activity')
        .select('AVG(rating)', 'avgRating')
        .addSelect('COUNT(*)', 'totalRatings')
        .where('activity.recipeId = :recipeId', { recipeId })
        .andWhere('activity.activityType = :type', { type: 'rate_recipe' })
        .getRawOne();

      // Update recipe with calculated stats
      await this.activityRepository.manager.update(
        'recipes',
        { id: recipeId },
        {
          averageRating: parseFloat(stats.avgRating) || 0,
          ratingCount: parseInt(stats.totalRatings) || 0,
        }
      );

      console.log(`Updated stats for recipe ${recipeId}`);
    } catch (error) {
      console.error('Failed to calculate recipe stats:', error);
      throw error;
    }
  }
}

---
# src/queue/processors/notifications.processor.ts
import { Processor, Process } from '@nestjs/bull';
import { Job } from 'bull';
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';

import { PushNotification } from '../../entities/push-notification.entity';
import { User } from '../../entities/user.entity';
import { NotificationsService } from '../../notifications/notifications.service';

@Processor('notifications')
@Injectable()
export class NotificationsProcessor {
  constructor(
    @InjectRepository(PushNotification)
    private notificationRepository: Repository<PushNotification>,
    
    @InjectRepository(User)
    private userRepository: Repository<User>,
    
    private notificationsService: NotificationsService,
  ) {}

  @Process('send-push')
  async handlePushNotification(job: Job) {
    const { notificationId, userId, fcmToken } = job.data;

    try {
      const notification = await this.notificationRepository.findOne({
        where: { id: notificationId },
      });

      if (!notification) {
        throw new Error(`Notification ${notificationId} not found`);
      }

      // Get FCM token if not provided
      let token = fcmToken;
      if (!token && userId) {
        const user = await this.userRepository.findOne({
          where: { id: userId },
          select: ['fcmToken'],
        });
        token = user?.fcmToken;
      }

      if (!token) {
        console.log(`No FCM token found for user ${userId}`);
        return;
      }

      // Send the notification
      const result = await this.notificationsService.sendPushNotification(
        token,
        notification.title,
        notification.body,
        notification.data,
      );

      // Update notification status
      await this.notificationRepository.update(notificationId, {
        status: result.success ? 'sent' : 'failed',
        sentAt: result.success ? new Date() : null,
      });

      console.log(`Push notification ${result.success ? 'sent' : 'failed'} for user ${userId}`);
    } catch (error) {
      console.error('Failed to send push notification:', error);
      
      // Mark notification as failed
      await this.notificationRepository.update(notificationId, {
        status: 'failed',
      });
      
      throw error;
    }
  }

  @Process('send-bulk-notification')
  async handleBulkNotification(job: Job) {
    const { title, body, data, userSegment } = job.data;

    try {
      // Get users based on segment criteria
      let usersQuery = this.userRepository.createQueryBuilder('user')
        .where('user.fcmToken IS NOT NULL')
        .andWhere('user.isActive = true');

      // Apply segment filters
      if (userSegment.premium) {
        usersQuery = usersQuery
          .leftJoin('user.subscriptions', 'subscription')
          .andWhere('subscription.endDate > :now', { now: new Date() });
      }

      if (userSegment.languageCode) {
        usersQuery = usersQuery
          .andWhere('user.preferredLanguageCode = :lang', { lang: userSegment.languageCode });
      }

      const users = await usersQuery.getMany();

      // Send notifications in batches
      const batchSize = 100;
      for (let i = 0; i < users.length; i += batchSize) {
        const batch = users.slice(i, i + batchSize);
        
        const notifications = batch.map(user => ({
          userId: user.id,
          title,
          body,
          data,
          status: 'pending',
        }));

        const savedNotifications = await this.notificationRepository.save(notifications);

        // Queue individual send jobs
        for (const notification of savedNotifications) {
          await job.queue.add('send-push', {
            notificationId: notification.id,
            userId: notification.userId,
          });
        }
      }

      console.log(`Queued bulk notifications for ${users.length} users`);
    } catch (error) {
      console.error('Failed to process bulk notification:', error);
      throw error;
    }
  }
}

---
# src/database/seeds/languages.seed.ts
import { DataSource } from 'typeorm';
import { Language } from '../../entities/language.entity';

export async function seedLanguages(dataSource: DataSource) {
  const languageRepository = dataSource.getRepository(Language);

  const languages = [
    { code: 'tr', name: 'Türkçe', isActive: true },
    { code: 'en', name: 'English', isActive: true },
    { code: 'es', name: 'Español', isActive: true },
    { code: 'fr', name: 'Français', isActive: true },
    { code: 'de', name: 'Deutsch', isActive: true },
    { code: 'ar', name: 'العربية', isActive: true },
  ];

  for (const langData of languages) {
    const existingLanguage = await languageRepository.findOne({
      where: { code: langData.code },
    });

    if (!existingLanguage) {
      const language = languageRepository.create(langData);
      await languageRepository.save(language);
      console.log(`Created language: ${langData.name}`);
    }
  }
}

---
# src/database/seeds/subscription-plans.seed.ts
import { DataSource } from 'typeorm';
import { SubscriptionPlan } from '../../entities/subscription-plan.entity';
import { SubscriptionPlanTranslation } from '../../entities/subscription-plan-translation.entity';

export async function seedSubscriptionPlans(dataSource: DataSource) {
  const planRepository = dataSource.getRepository(SubscriptionPlan);
  const translationRepository = dataSource.getRepository(SubscriptionPlanTranslation);

  const plans = [
    {
      name: 'Monthly Premium',
      durationMonths: 1,
      price: 29.99,
      description: 'Monthly premium membership',
      features: {
        premiumRecipes: true,
        adFree: true,
        unlimitedFavorites: true,
        calorieTracking: true,
      },
      sortOrder: 1,
      translations: {
        tr: { name: 'Aylık Premium', description: 'Aylık premium üyelik' },
        en: { name: 'Monthly Premium', description: 'Monthly premium membership' },
        es: { name: 'Premium Mensual', description: 'Membresía premium mensual' },
      },
    },
    {
      name: '6-Month Premium',
      durationMonths: 6,
      price: 149.99,
      description: '6-month premium membership with 17% discount',
      features: {
        premiumRecipes: true,
        adFree: true,
        unlimitedFavorites: true,
        calorieTracking: true,
        discount: '17%',
      },
      sortOrder: 2,
      translations: {
        tr: { name: '6 Aylık Premium', description: '%17 indirimli 6 aylık premium üyelik' },
        en: { name: '6-Month Premium', description: '6-month premium membership with 17% discount' },
        es: { name: 'Premium 6 Meses', description: 'Membresía premium de 6 meses con 17% de descuento' },
      },
    },
    {
      name: 'Annual Premium',
      durationMonths: 12,
      price: 249.99,
      description: 'Annual premium membership with 30% discount',
      features: {
        premiumRecipes: true,
        adFree: true,
        unlimitedFavorites: true,
        calorieTracking: true,
        discount: '30%',
        priority: true,
      },
      sortOrder: 3,
      translations: {
        tr: { name: 'Yıllık Premium', description: '%30 indirimli yıllık premium üyelik' },
        en: { name: 'Annual Premium', description: 'Annual premium membership with 30% discount' },
        es: { name: 'Premium Anual', description: 'Membresía premium anual con 30% de descuento' },
      },
    },
  ];

  for (const planData of plans) {
    const { translations, ...planInfo } = planData;
    
    const existingPlan = await planRepository.findOne({
      where: { name: planInfo.name },
    });

    if (!existingPlan) {
      const plan = planRepository.create(planInfo);
      const savedPlan = await planRepository.save(plan);

      // Create translations
      for (const [languageCode, translation] of Object.entries(translations)) {
        const planTranslation = translationRepository.create({
          planId: savedPlan.id,
          languageCode,
          name: translation.name,
          description: translation.description,
        });
        await translationRepository.save(planTranslation);
      }

      console.log(`Created subscription plan: ${planInfo.name}`);
    }
  }
}

---
# src/database/seeds/categories.seed.ts
import { DataSource } from 'typeorm';
import { Category } from '../../entities/category.entity';
import { CategoryTranslation } from '../../entities/category-translation.entity';

export async function seedCategories(dataSource: DataSource) {
  const categoryRepository = dataSource.getRepository(Category);
  const translationRepository = dataSource.getRepository(CategoryTranslation);

  const categories = [
    {
      icon: '☀️',
      color: '#FF9500',
      sortOrder: 1,
      translations: {
        tr: 'Kahvaltı',
        en: 'Breakfast',
        es: 'Desayuno',
        fr: 'Petit-déjeuner',
      },
    },
    {
      icon: '🍽️',
      color: '#007AFF',
      sortOrder: 2,
      translations: {
        tr: 'Ana Yemekler',
        en: 'Main Dishes',
        es: 'Platos Principales',
        fr: 'Plats Principaux',
      },
    },
    {
      icon: '🥗',
      color: '#34C759',
      sortOrder: 3,
      translations: {
        tr: 'Salatalar',
        en: 'Salads',
        es: 'Ensaladas',
        fr: 'Salades',
      },
    },
    {
      icon: '🍖',
      color: '#FF3B30',
      sortOrder: 4,
      translations: {
        tr: 'Et Yemekleri',
        en: 'Meat Dishes',
        es: 'Platos de Carne',
        fr: 'Plats de Viande',
      },
    },
    {
      icon: '🐟',
      color: '#30B0C7',
      sortOrder: 5,
      translations: {
        tr: 'Balık ve Deniz Ürünleri',
        en: 'Fish & Seafood',
        es: 'Pescado y Mariscos',
        fr: 'Poisson et Fruits de Mer',
      },
    },
    {
      icon: '🍰',
      color: '#FF2D92',
      sortOrder: 6,
      translations: {
        tr: 'Tatlılar',
        en: 'Desserts',
        es: 'Postres',
        fr: 'Desserts',
      },
    },
    {
      icon: '🥤',
      color: '#5856D6',
      sortOrder: 7,
      translations: {
        tr: 'İçecekler',
        en: 'Beverages',
        es: 'Bebidas',
        fr: 'Boissons',
      },
    },
    {
      icon: '🥪',
      color: '#FF9500',
      sortOrder: 8,
      translations: {
        tr: 'Sandviçler',
        en: 'Sandwiches',
        es: 'Sándwiches',
        fr: 'Sandwichs',
      },
    },
    {
      icon: '🍕',
      color: '#FF6B35',
      sortOrder: 9,
      translations: {
        tr: 'Pizza ve Makarna',
        en: 'Pizza & Pasta',
        es: 'Pizza y Pasta',
        fr: 'Pizza et Pâtes',
      },
    },
    {
      icon: '🌮',
      color: '#FF9500',
      sortOrder: 10,
      translations: {
        tr: 'Atıştırmalıklar',
        en: 'Snacks',
        es: 'Aperitivos',
        fr: 'Collations',
      },
    },
  ];

  for (const categoryData of categories) {
    const { translations, ...categoryInfo } = categoryData;
    
    // Check if category exists by checking translations
    const existingTranslation = await translationRepository.findOne({
      where: { 
        languageCode: 'tr',
        name: translations.tr,
      },
    });

    if (!existingTranslation) {
      const category = categoryRepository.create(categoryInfo);
      const savedCategory = await categoryRepository.save(category);

      // Create translations
      for (const [languageCode, name] of Object.entries(translations)) {
        const translation = translationRepository.create({
          categoryId: savedCategory.id,
          languageCode,
          name,
        });
        await translationRepository.save(translation);
      }

      console.log(`Created category: ${translations.tr}`);
    }
  }
}

---
# src/database/seeds/run-seeds.ts
import { DataSource } from 'typeorm';
import { databaseConfig } from '../../config/database.config';
import { ConfigService } from '@nestjs/config';

import { seedLanguages } from './languages.seed';
import { seedSubscriptionPlans } from './subscription-plans.seed';
import { seedCategories } from './categories.seed';

async function runSeeds() {
  const configService = new ConfigService();
  const dataSource = new DataSource(databaseConfig(configService) as any);

  try {
    await dataSource.initialize();
    console.log('Database connected successfully');

    console.log('Running seeds...');
    
    await seedLanguages(dataSource);
    await seedSubscriptionPlans(dataSource);
    await seedCategories(dataSource);
    
    console.log('All seeds completed successfully');
  } catch (error) {
    console.error('Error running seeds:', error);
  } finally {
    await dataSource.destroy();
  }
}

runSeeds();

---
# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: mycheff_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Run linting
        run: yarn lint
      
      - name: Run tests
        run: yarn test:cov
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: mycheff_test
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mycheff-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster mycheff-cluster --service mycheff-api-service --force-new-deployment

---
# kubernetes/deployment.yaml (Alternative to Docker Compose for production)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mycheff-api
  labels:
    app: mycheff-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mycheff-api
  template:
    metadata:
      labels:
        app: mycheff-api
    spec:
      containers:
      - name: mycheff-api
        image: your-registry/mycheff-api:latest
        ports:
        - containerPort: 3000
        env:
        - name: DATABASE_HOST
          valueFrom:
            secretKeyRef:
              name: mycheff-secrets
              key: database-host
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mycheff-secrets
              key: database-password
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: mycheff-secrets
              key: redis-host
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: mycheff-api-service
spec:
  selector:
    app: mycheff-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: LoadBalancer