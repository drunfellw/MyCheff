---
description: 
globs: 
alwaysApply: true
---
# MyCheff Project Guidelines for Cursor AI

## ⚠️ CRITICAL: NEVER CHANGE DATABASE CONFIGURATION! ⚠️

**🚨 ABSOLUTE RULES - NEVER VIOLATE:**
1. **PostgreSQL is ALWAYS on localhost:5432** - NEVER change this
2. **Username: postgres, Password: 123** - CONFIRMED WORKING PASSWORD
3. **Database: postgres, Schema: mycheff** - NEVER alter
4. **NEVER touch docker-compose.yml database ports**
5. **NEVER suggest changing connection strings**
6. **NEVER restart/stop/start PostgreSQL services**
7. **If backend has DB errors - USE start-backend.sh script**

**🎯 REMEMBER:** Database is working with password "123". Backend has start-backend.sh script that sets correct environment variables.

**🔧 KALICI ÇÖZÜMLER:**
- Database schema oluşturuldu (28 tablo)
- Sample data yüklendi (languages, categories, recipes)
- Backend app.module.ts'te default password "123" ayarlandı
- start-backend.sh script'i oluşturuldu
- database_fix.py script'i ile setup tamamlandı

**▶️ Backend başlatma:**
```bash
cd mycheff-backend
./start-backend.sh
```

---

## 🍳 Project Overview
MyCheff is a comprehensive food and recipe application with:
- **Mobile App**: React Native + Expo (iOS/Android)
- **Backend API**: NestJS + TypeScript + PostgreSQL
- **Admin Panel**: Next.js dashboard
- **Database**: PostgreSQL with multi-language support

## 🏗️ Architecture Guidelines

### Project Structure
```
MyCheff/
├── mycheff-frontend/          # React Native + Expo mobile app
├── mycheff-backend/           # NestJS API server
├── admin-panel/               # Next.js admin dashboard
├── docs/                      # Project documentation
├── database/                  # Database scripts and schema
├── deploy.sh                  # Production deployment script
└── docker-compose.yml         # Docker configuration
```

## 📱 Frontend (React Native + Expo) Guidelines

### Recommended Tech Stack
- React Native with Expo
- TypeScript (prefer strict mode when possible)
- Custom component-based navigation system
- React Query (TanStack Query) for state management
- AsyncStorage for local data persistence

### Design System Constants
Consider using these existing constants from `src/constants/` when available:

```typescript
// Example Colors (customize as needed)
COLORS.primary = '#2E7D32'      // or your preferred primary color
COLORS.secondary = '#FF6F00'    // or your preferred secondary color
COLORS.background = '#FBFBFE'   // or your preferred background
COLORS.textPrimary = '#230606'  // or your preferred text color

// Typography (Poppins or preferred font family)
TEXT_STYLES.heading1 = { fontSize: 28, fontFamily: 'Poppins_600SemiBold' }
TEXT_STYLES.bodyMedium = { fontSize: 14, fontFamily: 'Poppins_400Regular' }

// Spacing (adjust as needed)
SPACING = { xs: 4, sm: 8, md: 12, lg: 16, xl: 24, xxl: 32, xxxl: 48 }
```

### Component Structure Pattern
Consider this pattern for screen components when appropriate:

```typescript
// screens/ExampleScreen.tsx
import React, { useState, useCallback } from 'react';
import { View, ScrollView, StyleSheet } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { useQuery } from '@tanstack/react-query';

interface ScreenProps {
  navigation?: {
    navigate: (screen: string) => void;
    goBack: () => void;
  };
}

const ExampleScreen = React.memo<ScreenProps>(({ navigation }) => {
  const insets = useSafeAreaInsets();
  
  return (
    <View style={[styles.container, { paddingTop: insets.top }]}>
      {/* Screen content */}
    </View>
  );
});

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: COLORS.background },
});

export default ExampleScreen;
```

### API Integration Suggestion
Consider this API service pattern when building new services:

```typescript
// services/api.ts
const apiClient = axios.create({
  baseURL: `${process.env.EXPO_PUBLIC_API_URL}/api/v1`,
  timeout: 15000,
});

// Include auth token in requests when available
apiClient.interceptors.request.use(async (config) => {
  const token = await AsyncStorage.getItem('access_token');
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});
```

## 🔧 Backend (NestJS) Guidelines

### Recommended Tech Stack
- NestJS with TypeScript
- PostgreSQL with TypeORM
- JWT authentication with bcrypt password hashing
- Swagger/OpenAPI documentation
- class-validator for input validation

### Module Structure Suggestion
Consider this NestJS module pattern:

```typescript
// modules/example/example.module.ts
@Module({
  imports: [TypeOrmModule.forFeature([ExampleEntity])],
  controllers: [ExampleController],
  providers: [ExampleService],
  exports: [ExampleService],
})
export class ExampleModule {}
```

### Entity Pattern Example
Database entity convention suggestions:

```typescript
// entities/example.entity.ts
@Entity('examples')
export class ExampleEntity {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column({ type: 'varchar', length: 100 })
  name: string;

  @Column({ type: 'boolean', default: true })
  isActive: boolean;

  @CreateDateColumn({ name: 'created_at' })
  createdAt: Date;

  @UpdateDateColumn({ name: 'updated_at' })
  updatedAt: Date;
}
```

### API Response Format Suggestion
Consider this standardized response structure:

```typescript
// Successful response
{
  "success": true,
  "data": any,
  "message": string,
  "pagination"?: {
    "page": number,
    "limit": number,
    "total": number,
    "totalPages": number
  }
}

// Error response
{
  "success": false,
  "error": string,
  "message": string,
  "statusCode": number
}
```

### Controller Pattern Example
Consider this controller structure when building new controllers:

```typescript
@Controller('api/v1/examples')
@ApiTags('Examples')
export class ExampleController {
  @Get()
  @ApiResponse({ status: 200, description: 'Examples retrieved successfully' })
  async getAll(@Query() query: PaginationDto) {
    return this.exampleService.findAll(query);
  }
}
```

## 🗄️ Database Guidelines

### Schema Structure Suggestions
- Consider using `mycheff` schema for organization
- UUID primary keys are recommended
- snake_case for column names works well
- Foreign keys can follow `table_id` convention
- Include `created_at` and `updated_at` timestamps when useful

### Multi-language Support Pattern
For content requiring translations, consider this translation table pattern:

```sql
-- Main table
CREATE TABLE mycheff.recipes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  cooking_time INTEGER NOT NULL,
  difficulty VARCHAR(20) DEFAULT 'Medium',
  created_at TIMESTAMP DEFAULT NOW()
);

-- Translation table
CREATE TABLE mycheff.recipe_translations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  recipe_id UUID REFERENCES mycheff.recipes(id),
  language_code VARCHAR(5) REFERENCES mycheff.languages(code),
  title VARCHAR(100) NOT NULL,
  description TEXT
);
```

### Key Tables in Current System
- `mycheff.users` - User accounts
- `mycheff.recipes` - Recipe master data
- `mycheff.recipe_translations` - Multi-language recipe content
- `mycheff.ingredients` - Ingredient master data
- `mycheff.categories` - Recipe categories
- `mycheff.subscription_plans` - Premium subscription plans

## 🔐 Authentication & Security

### JWT Implementation Suggestions
- Use strong JWT secrets (32+ characters recommended)
- Consider including user role in JWT payload
- Implement refresh token mechanism when needed
- Set appropriate token expiration times

### Input Validation Approach
Consider using class-validator for input validation:

```typescript
export class CreateRecipeDto {
  @IsString()
  @Length(3, 100)
  title: string;

  @IsInt()
  @Min(1)
  cookingTime: number;

  @IsEnum(['Easy', 'Medium', 'Hard'])
  difficulty: string;
}
```

### Rate Limiting Suggestions
Consider applying rate limiting to public endpoints:
- Authentication: 5 requests per minute
- Recipe search: 30 requests per minute
- General API: 100 requests per minute

## 🌍 Multi-Language Support

### Language Implementation
- Support multiple languages based on user preference
- Use translation tables for content
- Consider language-specific content when needed
- Support proper character encoding for international content

### Content Guidelines
- Adapt content names to target audience/language
- Use appropriate terminology for the target market
- Consider cultural preferences in content organization
- Support regional variations when beneficial

## 📊 API Endpoints Reference

### Standard Endpoints Available
```
Authentication:
POST /api/v1/auth/register
POST /api/v1/auth/login
POST /api/v1/auth/logout

Recipes:
GET  /api/v1/recipes?page=1&limit=10&lang=tr
GET  /api/v1/recipes/featured
GET  /api/v1/recipes/search?q=query
GET  /api/v1/recipes/:id

Categories:
GET  /api/v1/categories

Ingredients:
GET  /api/v1/ingredients
GET  /api/v1/ingredients/search
```

## 🎨 UI/UX Guidelines

### Current Color Scheme
- Primary: Green (#2E7D32) - can be customized
- Secondary: Orange (#FF6F00) - can be adjusted
- Background: Light gray (#FBFBFE) - adaptable
- Text: Dark gray (#230606) - modifiable

### Typography Recommendations
- Font Family: Poppins (or suitable alternative)
- Sizes: 12px (xs) to 48px (5xl)
- Line Height: 1.5 for body text

### Component Naming Suggestions
- Use PascalCase for component names
- Consider prefixing screens: `HomeScreen`, `RecipeDetailScreen`
- Use descriptive names: `RecipeCard`, `CategoryButton`, `SearchBar`

## 🔄 State Management

### React Query Pattern Example
```typescript
// For data fetching
const { data, isLoading, error } = useQuery({
  queryKey: ['recipes', filters],
  queryFn: () => apiService.getRecipes(filters),
});

// For mutations
const mutation = useMutation({
  mutationFn: apiService.createRecipe,
  onSuccess: () => queryClient.invalidateQueries(['recipes']),
});
```

## 🚀 Production & Deployment

### Environment Variables Reference
```env
# Backend
NODE_ENV=production
DATABASE_SCHEMA=mycheff
JWT_SECRET=your-secure-secret-key

# Frontend
EXPO_PUBLIC_API_URL=https://api.yourdomain.com
EXPO_PUBLIC_ENVIRONMENT=production
```

### File Organization Suggestions
- Keep constants in `src/constants/`
- API services in `src/services/`
- Types in `src/types/`
- Utilities in `src/utils/`
- Components in `src/components/`

## 📝 Code Quality

### TypeScript Recommendations
- Use strict mode when possible
- Define interfaces for props and data structures
- Minimize use of `any` type, prefer `unknown` when necessary
- Use enums for fixed value sets

### Error Handling Suggestions
- Handle API errors gracefully
- Use try-catch blocks for async operations
- Provide user-friendly error messages in appropriate language
- Log errors for debugging when needed

### Performance Considerations
- Use React.memo for expensive components when beneficial
- Implement lazy loading for large lists
- Optimize images and assets
- Use proper key props for lists

## 🧪 Testing

### Test Users Available
```
admin@mycheff.com / admin123 (Admin role)
test@mycheff.com / test123 (User role)
chef@mycheff.com / chef123 (Chef role)
```

### Sample Data Available
- 20+ recipe examples
- 50+ ingredient examples
- Multiple categories for testing

## 🔧 Development Approach

1. **Database First**: Consider designing schema before implementation
2. **API First**: Consider implementing backend endpoints before frontend
3. **Type Safety**: Define TypeScript interfaces for data structures
4. **Documentation**: Update API docs for changes
5. **Testing**: Test with sample data
6. **Responsive**: Ensure UI works on different screen sizes

Feel free to adapt these guidelines based on project needs and requirements. These are suggestions to maintain consistency while allowing flexibility for innovation and improvement.

## 🚀 APPLICATION STARTUP & TROUBLESHOOTING GUIDE

### 🗄️ DATABASE READY & CONFIGURED

**⚠️ CRITICAL: Database schema is already set up - DO NOT recreate!**

#### Database Schema Status:
- ✅ **Complete schema available**: `database/setup_complete_schema.sql` (645 lines)
- ✅ **Auto-initialization**: `database/init.sql` creates mycheff schema
- ✅ **Sample data included**: Languages, Units, Subscription Plans with translations
- ✅ **Backend seeds ready**: Test users, categories, recipes, ingredients

#### Key Database Files:
```
database/
├── init.sql                    # Auto-creates mycheff schema
└── setup_complete_schema.sql   # Complete tables, indexes, triggers, sample data

mycheff-backend/src/database/seeds/ 
├── users.seed.ts              # Test user accounts
├── categories.seed.ts         # Recipe categories
├── recipes.seed.ts            # Sample recipes (450 lines)
├── languages.seed.ts          # Multi-language support
└── subscription-plans.seed.ts # Premium plans
```

#### Schema Features:
- **Multi-language support**: Translation tables for all content
- **Performance optimized**: GIN indexes, triggers, views
- **Premium features**: Subscription system included
- **Search ready**: Full-text search with trgm extension
- **Auto-updates**: Triggers for updated_at columns

#### Available Test Data:
```sql
-- Test Users (already seeded)
admin@mycheff.com / admin123 (Admin role)
test@mycheff.com / test123 (User role)  
chef@mycheff.com / chef123 (Chef role)

-- Languages: TR, EN, ES, FR, DE, AR
-- Units: Complete metric system + Turkish units
-- Subscription Plans: Free, Monthly Premium, Yearly Premium
-- Sample: 20+ recipes, 50+ ingredients, categories
```

#### Database Connection (Current):
- **Host**: localhost
- **Port**: 5433 (Docker PostgreSQL)
- **Database**: postgres
- **Schema**: mycheff
- **User**: postgres
- **Password**: 123

### 🚀 UPDATED STARTUP SEQUENCE

#### 1. **PRE-STARTUP DIAGNOSTICS** 🔍
Before starting any service, run these checks:

```bash
# Check what's currently running
echo "🔍 Current system state:"
echo "1. PostgreSQL (port 5432):" && lsof -i :5432 || echo "   ❌ PostgreSQL not running"
echo "2. Backend API (port 3001):" && lsof -i :3001 || echo "   ❌ Backend not running"  
echo "3. Admin Panel (port 3000):" && lsof -i :3000 || echo "   ❌ Admin panel not running"
echo "4. Frontend Expo (port 8081/8083):" && lsof -i :8081 -i :8083 || echo "   ❌ Frontend not running"
echo "5. Docker containers:" && docker ps
```

#### 2. **CLEAN SHUTDOWN FIRST** 🛑
Always clean shutdown before starting:

```bash
# Kill all related processes
echo "🛑 Cleaning up existing processes..."
pkill -f "node.*nest\|node.*next\|expo\|react-native" 2>/dev/null || echo "✅ No processes to kill"

# Stop Docker containers
docker stop $(docker ps -q) 2>/dev/null || echo "✅ No containers to stop"
```

#### 3. **DATABASE STARTUP** 🗄️
**⚠️ CRITICAL: PostgreSQL must run on port 5432 with password "password"**

```bash
# Method A: Use existing PostgreSQL (RECOMMENDED)
# Check if PostgreSQL is already running
if lsof -i :5432 >/dev/null 2>&1; then
    echo "✅ PostgreSQL already running on port 5432"
else
    echo "🚀 Starting local PostgreSQL..."
    brew services start postgresql
fi

# Method B: Docker PostgreSQL (if local doesn't work)
# cd mycheff-backend && docker-compose down --volumes --remove-orphans && docker-compose up -d postgres

# VERIFY DATABASE IS READY
sleep 3
psql -h localhost -U postgres -d postgres -c "SELECT current_database();" && echo "✅ PostgreSQL ready"
```

#### 4. **BACKEND STARTUP** 🔧
**⚠️ CRITICAL: Always navigate to mycheff-backend directory first**

```bash
# Navigate to backend directory (MUST BE FIRST)
cd /Users/ismailuzun/Desktop/MyCheff/mycheff-backend

# Kill any existing backend processes
pkill -f "nest" 2>/dev/null || echo "No backend to kill"

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    echo "📦 Installing backend dependencies..."
    npm install
fi

# Start backend
echo "🚀 Starting backend API..."
npm run start:dev &

# Wait and verify
sleep 15
curl -s http://localhost:3001/health | grep '"status":"ok"' && echo "✅ Backend API working" || echo "❌ Backend failed"
```

#### 5. **ADMIN PANEL STARTUP** 🖥️
**⚠️ CRITICAL: Navigate to admin-panel directory**

```bash
# Navigate to admin panel directory
cd /Users/ismailuzun/Desktop/MyCheff/admin-panel

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    echo "📦 Installing admin panel dependencies..."
    npm install
fi

# Start admin panel
echo "🚀 Starting admin panel..."
npm run dev &

# Verify
sleep 10
curl -s http://localhost:3000 | head -1 && echo "✅ Admin panel running"
```

#### 6. **FRONTEND STARTUP** 📱
**⚠️ CRITICAL: Navigate to mycheff-frontend directory**

```bash
# Navigate to frontend directory
cd /Users/ismailuzun/Desktop/MyCheff/mycheff-frontend

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    echo "📦 Installing frontend dependencies..."
    npm install
fi

# Start with clear cache
echo "🚀 Starting frontend..."
npx expo start --clear &

echo "✅ Startup sequence complete!"
```

### 🆘 UPDATED COMMON PROBLEMS & SOLUTIONS

#### Problem: "EADDRINUSE: address already in use :::3001"
**Solution: Kill existing backend process**
```bash
# Find and kill backend process
pkill -f "nest" && echo "Backend killed" || echo "No backend running"
# OR manual kill:
lsof -ti:3001 | xargs kill -9 2>/dev/null
```

#### Problem: "npm: package.json not found in MyCheff directory"
**Solution: ALWAYS navigate to correct subdirectory first**
```bash
# For backend:
cd /Users/ismailuzun/Desktop/MyCheff/mycheff-backend && npm run start:dev

# For admin:
cd /Users/ismailuzun/Desktop/MyCheff/admin-panel && npm run dev

# For frontend:
cd /Users/ismailuzun/Desktop/MyCheff/mycheff-frontend && npx expo start
```

#### Problem: Database connection failed
**Solution: Use correct password and port**
```bash
# Check PostgreSQL status
brew services list | grep postgres

# If not running, start it
brew services start postgresql

# Test connection with correct password
psql -h localhost -U postgres -d postgres -c "SELECT version();"
```

#### Problem: Docker PostgreSQL conflicts
**Solution: Use local PostgreSQL instead**
```bash
# Stop any Docker PostgreSQL
docker stop $(docker ps -q) 2>/dev/null

# Use local PostgreSQL
brew services start postgresql

# Update backend config to use port 5432 (already done)
```

### 📋 UPDATED STARTUP VERIFICATION CHECKLIST

After running startup sequence, verify all services:

```bash
echo "🧪 FINAL VERIFICATION:"
echo "1. Database:" && psql -h localhost -U postgres -d postgres -c "SELECT current_database();" | head -3
echo "2. Backend API:" && curl -s http://localhost:3001/health | grep '"status":"ok"' && echo " ✅ Working"
echo "3. Admin Panel:" && curl -s http://localhost:3000 | head -1 && echo " ✅ Running"
echo "4. Frontend Expo:" && curl -s http://localhost:8081/ | grep '"name":"mycheff-frontend"' && echo " ✅ Ready"
```

### 🔑 CONFIRMED TEST CREDENTIALS
```
Normal User: test@mycheff.com / test123
Admin User:  admin@mycheff.com / admin123
Chef User:   chef@mycheff.com / chef123
```

### 🚨 CRITICAL DATABASE NOTES

**CONFIRMED WORKING CONFIGURATION:**
- ✅ Database: PostgreSQL local (port 5432)
- ✅ Username: postgres
- ✅ Password: 123
- ✅ Database: postgres
- ✅ Schema: mycheff (auto-created)

**DO NOT:**
- ❌ Use Docker PostgreSQL (causes port conflicts)
- ❌ Change from port 5432
- ❌ Use password "123"
- ❌ Run npm commands from wrong directories

**DO:**
- ✅ Use local PostgreSQL on port 5432
- ✅ Use password "123" 
- ✅ Always navigate to correct subdirectories
- ✅ Kill existing processes before starting new ones

### 🎯 ONE-COMMAND STARTUP (EMERGENCY)

If everything fails, use this complete reset:

```bash
# Complete application startup script
cd /Users/ismailuzun/Desktop/MyCheff && \
pkill -f "node.*nest\|node.*next\|expo" 2>/dev/null && \
docker stop $(docker ps -q) 2>/dev/null && \
brew services start postgresql && \
sleep 5 && \
cd mycheff-backend && npm run start:dev & \
sleep 10 && \
cd ../admin-panel && npm run dev & \
sleep 5 && \
cd ../mycheff-frontend && npx expo start --clear & \
sleep 15 && \
echo "🎉 All services started!"
```

---

**🎯 REMEMBER:** 
1. PostgreSQL local (port 5432, password "123")
2. Always navigate to correct subdirectories before npm commands
3. Kill existing processes before starting new ones
4. Use the one-command startup for quick recovery

## 🔧 MAINTENANCE COMMANDS

Regular maintenance to prevent issues:
```bash
# Weekly cleanup
docker system prune -f
npm cache clean --force
npx expo install --fix

# Monthly updates
npm update
npx expo doctor
```

---

**🎯 REMEMBER:** When user requests application startup, ALWAYS follow the complete diagnostic and startup sequence above. Don't skip steps or make assumptions about current state.
